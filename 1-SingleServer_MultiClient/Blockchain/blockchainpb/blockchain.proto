syntax = "proto3";

package blockchain;

option go_package = "/blockchainpb";

message Block {
    int64 index = 1;
    int64 proof = 2;
    string previous_hash = 3;
    string timestamp = 4;
    repeated Transaction transactions = 5;
}

message User {
    string uuid = 1;
}

message Transaction {
    string uuid = 1;
    string sender = 2;
    string receiver = 3;
    double amount = 4;
}

message CreateBlockRequest {
}

message CreateBlockResponse {
    Block block = 1;
}

message MineBlockRequest {
    string miner = 1;
}

message MineBlockResponse {
    Block block = 1;
}

message GetBlocksRequest {
}

message GetBlocksResponse {
    Block block = 1;
}

message AddUserRequest {
}

message AddUserResponse {
    string uuid = 1;
}

message ListUserRequest {
}

message ListUserResponse {
    string uuid = 1;
}

message AddTransactionRequest {
    User sender = 1;
    User receiver = 2;
    double amount = 3;
}

message AddTransactionResponse {
    Transaction transaction = 1;
}

message GetBallanceRequest {
    string uuid = 1;
}

message GetBallanceResponse {
    double ballance = 1;
}

service blockchain {
    // Creates a blockchain on the server
    rpc CreateBlockchain(CreateBlockRequest) returns (CreateBlockResponse);

    // Mines a block from the created blockchain
    rpc MineBlock(MineBlockRequest) returns (MineBlockResponse);

    // Returns all blocks from the blockchain as a stream o blocks
    rpc GetBlockchain(GetBlocksRequest) returns (stream GetBlocksResponse);

    // Adds a user-node to the blockchain
    rpc AddUser(AddUserRequest) returns (AddUserResponse);

    // Lists all users in blockchain
    rpc ListUsers(ListUserRequest) returns (stream ListUserResponse);

    // Adds a new specified transaction amount between specified sender, receiver
    rpc AddTransaction(AddTransactionRequest) returns (AddTransactionResponse);

    // Returns the ballance of a specified user
    rpc GetBallance(GetBallanceRequest) returns (GetBallanceResponse);
}