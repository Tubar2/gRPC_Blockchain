// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blockchainpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainClient is the client API for Blockchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainClient interface {
	// Creates a blockchain on the server
	CreateBlockchain(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*CreateBlockResponse, error)
	// Mines a block from the created blockchain
	MineBlock(ctx context.Context, in *MineBlockRequest, opts ...grpc.CallOption) (*MineBlockResponse, error)
	// Returns all blocks from the blockchain as a stream o blocks
	GetBlockchain(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (Blockchain_GetBlockchainClient, error)
	// Adds a user-node to the blockchain
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	// Lists all users in blockchain
	ListUsers(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (Blockchain_ListUsersClient, error)
	// Adds a new specified transaction amount between specified sender, receiver
	AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error)
	// Returns the ballance of a specified user
	GetBallance(ctx context.Context, in *GetBallanceRequest, opts ...grpc.CallOption) (*GetBallanceResponse, error)
}

type blockchainClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainClient(cc grpc.ClientConnInterface) BlockchainClient {
	return &blockchainClient{cc}
}

func (c *blockchainClient) CreateBlockchain(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*CreateBlockResponse, error) {
	out := new(CreateBlockResponse)
	err := c.cc.Invoke(ctx, "/blockchain.blockchain/CreateBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) MineBlock(ctx context.Context, in *MineBlockRequest, opts ...grpc.CallOption) (*MineBlockResponse, error) {
	out := new(MineBlockResponse)
	err := c.cc.Invoke(ctx, "/blockchain.blockchain/MineBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetBlockchain(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (Blockchain_GetBlockchainClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blockchain_ServiceDesc.Streams[0], "/blockchain.blockchain/GetBlockchain", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainGetBlockchainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blockchain_GetBlockchainClient interface {
	Recv() (*GetBlocksResponse, error)
	grpc.ClientStream
}

type blockchainGetBlockchainClient struct {
	grpc.ClientStream
}

func (x *blockchainGetBlockchainClient) Recv() (*GetBlocksResponse, error) {
	m := new(GetBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/blockchain.blockchain/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) ListUsers(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (Blockchain_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blockchain_ServiceDesc.Streams[1], "/blockchain.blockchain/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blockchain_ListUsersClient interface {
	Recv() (*ListUserResponse, error)
	grpc.ClientStream
}

type blockchainListUsersClient struct {
	grpc.ClientStream
}

func (x *blockchainListUsersClient) Recv() (*ListUserResponse, error) {
	m := new(ListUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainClient) AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error) {
	out := new(AddTransactionResponse)
	err := c.cc.Invoke(ctx, "/blockchain.blockchain/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetBallance(ctx context.Context, in *GetBallanceRequest, opts ...grpc.CallOption) (*GetBallanceResponse, error) {
	out := new(GetBallanceResponse)
	err := c.cc.Invoke(ctx, "/blockchain.blockchain/GetBallance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServer is the server API for Blockchain service.
// All implementations must embed UnimplementedBlockchainServer
// for forward compatibility
type BlockchainServer interface {
	// Creates a blockchain on the server
	CreateBlockchain(context.Context, *CreateBlockRequest) (*CreateBlockResponse, error)
	// Mines a block from the created blockchain
	MineBlock(context.Context, *MineBlockRequest) (*MineBlockResponse, error)
	// Returns all blocks from the blockchain as a stream o blocks
	GetBlockchain(*GetBlocksRequest, Blockchain_GetBlockchainServer) error
	// Adds a user-node to the blockchain
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	// Lists all users in blockchain
	ListUsers(*ListUserRequest, Blockchain_ListUsersServer) error
	// Adds a new specified transaction amount between specified sender, receiver
	AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error)
	// Returns the ballance of a specified user
	GetBallance(context.Context, *GetBallanceRequest) (*GetBallanceResponse, error)
	mustEmbedUnimplementedBlockchainServer()
}

// UnimplementedBlockchainServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainServer struct {
}

func (UnimplementedBlockchainServer) CreateBlockchain(context.Context, *CreateBlockRequest) (*CreateBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlockchain not implemented")
}
func (UnimplementedBlockchainServer) MineBlock(context.Context, *MineBlockRequest) (*MineBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineBlock not implemented")
}
func (UnimplementedBlockchainServer) GetBlockchain(*GetBlocksRequest, Blockchain_GetBlockchainServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockchain not implemented")
}
func (UnimplementedBlockchainServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedBlockchainServer) ListUsers(*ListUserRequest, Blockchain_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBlockchainServer) AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedBlockchainServer) GetBallance(context.Context, *GetBallanceRequest) (*GetBallanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBallance not implemented")
}
func (UnimplementedBlockchainServer) mustEmbedUnimplementedBlockchainServer() {}

// UnsafeBlockchainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServer will
// result in compilation errors.
type UnsafeBlockchainServer interface {
	mustEmbedUnimplementedBlockchainServer()
}

func RegisterBlockchainServer(s grpc.ServiceRegistrar, srv BlockchainServer) {
	s.RegisterService(&Blockchain_ServiceDesc, srv)
}

func _Blockchain_CreateBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).CreateBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.blockchain/CreateBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).CreateBlockchain(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_MineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).MineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.blockchain/MineBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).MineBlock(ctx, req.(*MineBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetBlockchain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServer).GetBlockchain(m, &blockchainGetBlockchainServer{stream})
}

type Blockchain_GetBlockchainServer interface {
	Send(*GetBlocksResponse) error
	grpc.ServerStream
}

type blockchainGetBlockchainServer struct {
	grpc.ServerStream
}

func (x *blockchainGetBlockchainServer) Send(m *GetBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blockchain_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.blockchain/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServer).ListUsers(m, &blockchainListUsersServer{stream})
}

type Blockchain_ListUsersServer interface {
	Send(*ListUserResponse) error
	grpc.ServerStream
}

type blockchainListUsersServer struct {
	grpc.ServerStream
}

func (x *blockchainListUsersServer) Send(m *ListUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blockchain_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.blockchain/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).AddTransaction(ctx, req.(*AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetBallance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBallanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetBallance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.blockchain/GetBallance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetBallance(ctx, req.(*GetBallanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blockchain_ServiceDesc is the grpc.ServiceDesc for Blockchain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blockchain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.blockchain",
	HandlerType: (*BlockchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlockchain",
			Handler:    _Blockchain_CreateBlockchain_Handler,
		},
		{
			MethodName: "MineBlock",
			Handler:    _Blockchain_MineBlock_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Blockchain_AddUser_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _Blockchain_AddTransaction_Handler,
		},
		{
			MethodName: "GetBallance",
			Handler:    _Blockchain_GetBallance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlockchain",
			Handler:       _Blockchain_GetBlockchain_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _Blockchain_ListUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blockchain/blockchainpb/blockchain.proto",
}
