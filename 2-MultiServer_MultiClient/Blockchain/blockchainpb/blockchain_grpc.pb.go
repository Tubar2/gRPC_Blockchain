// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blockchainpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	// Returns all blocks from the blockchain as a stream o blocks
	GetBlockchain(ctx context.Context, in *GetBlockchainRequest, opts ...grpc.CallOption) (*GetBlockchainResponse, error)
	// Update the user balance
	UpdateUserBalance(ctx context.Context, in *UpdateUserBalanceRequest, opts ...grpc.CallOption) (*UpdateUserBalanceResponse, error)
	// Mines a block from the created blockchain
	MineBlock(ctx context.Context, in *MineBlockRequest, opts ...grpc.CallOption) (*MineBlockResponse, error)
	// Trys to replace chain in server
	ReplaceChain(ctx context.Context, in *ReplaceChainRequest, opts ...grpc.CallOption) (*ReplaceChainResponse, error)
	// Removes a transaction from node
	RemoveTransaction(ctx context.Context, in *RemoveTransactionRequest, opts ...grpc.CallOption) (*RemoveTransactionResponse, error)
	// Receives a stream of user information to add to current node's network
	GetUserId(ctx context.Context, in *GetUserIDRequest, opts ...grpc.CallOption) (*GetUserIDResponse, error)
	// Connects a single user to network
	ConnectToNetwork(ctx context.Context, in *ConnectToNetworkRequest, opts ...grpc.CallOption) (BlockchainService_ConnectToNetworkClient, error)
	// Receives a stream of user information to add to current node's network
	ConnectUser(ctx context.Context, in *ConnectUserRequest, opts ...grpc.CallOption) (BlockchainService_ConnectUserClient, error)
	ConnectToNode(ctx context.Context, in *ConnectToNodeRequest, opts ...grpc.CallOption) (*ConnectToNodeResponse, error)
	// Adds a new specified transaction amount between specified sender, receiver
	AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error)
	// Appends a transaction to server
	AppendTransactions(ctx context.Context, in *AppendTransactionsRequest, opts ...grpc.CallOption) (*AppendTransactionsResponse, error)
	// Returns a stream of transactions
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (BlockchainService_GetTransactionsClient, error)
	// Returns a stream of users in current node
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (BlockchainService_GetUsersClient, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) GetBlockchain(ctx context.Context, in *GetBlockchainRequest, opts ...grpc.CallOption) (*GetBlockchainResponse, error) {
	out := new(GetBlockchainResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/GetBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) UpdateUserBalance(ctx context.Context, in *UpdateUserBalanceRequest, opts ...grpc.CallOption) (*UpdateUserBalanceResponse, error) {
	out := new(UpdateUserBalanceResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/UpdateUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) MineBlock(ctx context.Context, in *MineBlockRequest, opts ...grpc.CallOption) (*MineBlockResponse, error) {
	out := new(MineBlockResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/MineBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) ReplaceChain(ctx context.Context, in *ReplaceChainRequest, opts ...grpc.CallOption) (*ReplaceChainResponse, error) {
	out := new(ReplaceChainResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/ReplaceChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) RemoveTransaction(ctx context.Context, in *RemoveTransactionRequest, opts ...grpc.CallOption) (*RemoveTransactionResponse, error) {
	out := new(RemoveTransactionResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/RemoveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetUserId(ctx context.Context, in *GetUserIDRequest, opts ...grpc.CallOption) (*GetUserIDResponse, error) {
	out := new(GetUserIDResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/GetUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) ConnectToNetwork(ctx context.Context, in *ConnectToNetworkRequest, opts ...grpc.CallOption) (BlockchainService_ConnectToNetworkClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainService_ServiceDesc.Streams[0], "/blockchain.BlockchainService/ConnectToNetwork", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainServiceConnectToNetworkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainService_ConnectToNetworkClient interface {
	Recv() (*ConnectToNetworkResponse, error)
	grpc.ClientStream
}

type blockchainServiceConnectToNetworkClient struct {
	grpc.ClientStream
}

func (x *blockchainServiceConnectToNetworkClient) Recv() (*ConnectToNetworkResponse, error) {
	m := new(ConnectToNetworkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainServiceClient) ConnectUser(ctx context.Context, in *ConnectUserRequest, opts ...grpc.CallOption) (BlockchainService_ConnectUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainService_ServiceDesc.Streams[1], "/blockchain.BlockchainService/ConnectUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainServiceConnectUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainService_ConnectUserClient interface {
	Recv() (*ConnectUserResponse, error)
	grpc.ClientStream
}

type blockchainServiceConnectUserClient struct {
	grpc.ClientStream
}

func (x *blockchainServiceConnectUserClient) Recv() (*ConnectUserResponse, error) {
	m := new(ConnectUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainServiceClient) ConnectToNode(ctx context.Context, in *ConnectToNodeRequest, opts ...grpc.CallOption) (*ConnectToNodeResponse, error) {
	out := new(ConnectToNodeResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/ConnectToNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error) {
	out := new(AddTransactionResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) AppendTransactions(ctx context.Context, in *AppendTransactionsRequest, opts ...grpc.CallOption) (*AppendTransactionsResponse, error) {
	out := new(AppendTransactionsResponse)
	err := c.cc.Invoke(ctx, "/blockchain.BlockchainService/AppendTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (BlockchainService_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainService_ServiceDesc.Streams[2], "/blockchain.BlockchainService/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainServiceGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainService_GetTransactionsClient interface {
	Recv() (*GetTransactionsResponse, error)
	grpc.ClientStream
}

type blockchainServiceGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *blockchainServiceGetTransactionsClient) Recv() (*GetTransactionsResponse, error) {
	m := new(GetTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (BlockchainService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainService_ServiceDesc.Streams[3], "/blockchain.BlockchainService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainService_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type blockchainServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *blockchainServiceGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility
type BlockchainServiceServer interface {
	// Returns all blocks from the blockchain as a stream o blocks
	GetBlockchain(context.Context, *GetBlockchainRequest) (*GetBlockchainResponse, error)
	// Update the user balance
	UpdateUserBalance(context.Context, *UpdateUserBalanceRequest) (*UpdateUserBalanceResponse, error)
	// Mines a block from the created blockchain
	MineBlock(context.Context, *MineBlockRequest) (*MineBlockResponse, error)
	// Trys to replace chain in server
	ReplaceChain(context.Context, *ReplaceChainRequest) (*ReplaceChainResponse, error)
	// Removes a transaction from node
	RemoveTransaction(context.Context, *RemoveTransactionRequest) (*RemoveTransactionResponse, error)
	// Receives a stream of user information to add to current node's network
	GetUserId(context.Context, *GetUserIDRequest) (*GetUserIDResponse, error)
	// Connects a single user to network
	ConnectToNetwork(*ConnectToNetworkRequest, BlockchainService_ConnectToNetworkServer) error
	// Receives a stream of user information to add to current node's network
	ConnectUser(*ConnectUserRequest, BlockchainService_ConnectUserServer) error
	ConnectToNode(context.Context, *ConnectToNodeRequest) (*ConnectToNodeResponse, error)
	// Adds a new specified transaction amount between specified sender, receiver
	AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error)
	// Appends a transaction to server
	AppendTransactions(context.Context, *AppendTransactionsRequest) (*AppendTransactionsResponse, error)
	// Returns a stream of transactions
	GetTransactions(*GetTransactionsRequest, BlockchainService_GetTransactionsServer) error
	// Returns a stream of users in current node
	GetUsers(*GetUsersRequest, BlockchainService_GetUsersServer) error
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainServiceServer struct {
}

func (UnimplementedBlockchainServiceServer) GetBlockchain(context.Context, *GetBlockchainRequest) (*GetBlockchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchain not implemented")
}
func (UnimplementedBlockchainServiceServer) UpdateUserBalance(context.Context, *UpdateUserBalanceRequest) (*UpdateUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBalance not implemented")
}
func (UnimplementedBlockchainServiceServer) MineBlock(context.Context, *MineBlockRequest) (*MineBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) ReplaceChain(context.Context, *ReplaceChainRequest) (*ReplaceChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceChain not implemented")
}
func (UnimplementedBlockchainServiceServer) RemoveTransaction(context.Context, *RemoveTransactionRequest) (*RemoveTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTransaction not implemented")
}
func (UnimplementedBlockchainServiceServer) GetUserId(context.Context, *GetUserIDRequest) (*GetUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserId not implemented")
}
func (UnimplementedBlockchainServiceServer) ConnectToNetwork(*ConnectToNetworkRequest, BlockchainService_ConnectToNetworkServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToNetwork not implemented")
}
func (UnimplementedBlockchainServiceServer) ConnectUser(*ConnectUserRequest, BlockchainService_ConnectUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectUser not implemented")
}
func (UnimplementedBlockchainServiceServer) ConnectToNode(context.Context, *ConnectToNodeRequest) (*ConnectToNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToNode not implemented")
}
func (UnimplementedBlockchainServiceServer) AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedBlockchainServiceServer) AppendTransactions(context.Context, *AppendTransactionsRequest) (*AppendTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendTransactions not implemented")
}
func (UnimplementedBlockchainServiceServer) GetTransactions(*GetTransactionsRequest, BlockchainService_GetTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedBlockchainServiceServer) GetUsers(*GetUsersRequest, BlockchainService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_GetBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/GetBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlockchain(ctx, req.(*GetBlockchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_UpdateUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).UpdateUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/UpdateUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).UpdateUserBalance(ctx, req.(*UpdateUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_MineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).MineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/MineBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).MineBlock(ctx, req.(*MineBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_ReplaceChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).ReplaceChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/ReplaceChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).ReplaceChain(ctx, req.(*ReplaceChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_RemoveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).RemoveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/RemoveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).RemoveTransaction(ctx, req.(*RemoveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/GetUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetUserId(ctx, req.(*GetUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_ConnectToNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectToNetworkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServiceServer).ConnectToNetwork(m, &blockchainServiceConnectToNetworkServer{stream})
}

type BlockchainService_ConnectToNetworkServer interface {
	Send(*ConnectToNetworkResponse) error
	grpc.ServerStream
}

type blockchainServiceConnectToNetworkServer struct {
	grpc.ServerStream
}

func (x *blockchainServiceConnectToNetworkServer) Send(m *ConnectToNetworkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockchainService_ConnectUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServiceServer).ConnectUser(m, &blockchainServiceConnectUserServer{stream})
}

type BlockchainService_ConnectUserServer interface {
	Send(*ConnectUserResponse) error
	grpc.ServerStream
}

type blockchainServiceConnectUserServer struct {
	grpc.ServerStream
}

func (x *blockchainServiceConnectUserServer) Send(m *ConnectUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockchainService_ConnectToNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).ConnectToNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/ConnectToNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).ConnectToNode(ctx, req.(*ConnectToNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).AddTransaction(ctx, req.(*AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_AppendTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).AppendTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockchainService/AppendTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).AppendTransactions(ctx, req.(*AppendTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServiceServer).GetTransactions(m, &blockchainServiceGetTransactionsServer{stream})
}

type BlockchainService_GetTransactionsServer interface {
	Send(*GetTransactionsResponse) error
	grpc.ServerStream
}

type blockchainServiceGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *blockchainServiceGetTransactionsServer) Send(m *GetTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockchainService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServiceServer).GetUsers(m, &blockchainServiceGetUsersServer{stream})
}

type BlockchainService_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type blockchainServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *blockchainServiceGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockchain",
			Handler:    _BlockchainService_GetBlockchain_Handler,
		},
		{
			MethodName: "UpdateUserBalance",
			Handler:    _BlockchainService_UpdateUserBalance_Handler,
		},
		{
			MethodName: "MineBlock",
			Handler:    _BlockchainService_MineBlock_Handler,
		},
		{
			MethodName: "ReplaceChain",
			Handler:    _BlockchainService_ReplaceChain_Handler,
		},
		{
			MethodName: "RemoveTransaction",
			Handler:    _BlockchainService_RemoveTransaction_Handler,
		},
		{
			MethodName: "GetUserId",
			Handler:    _BlockchainService_GetUserId_Handler,
		},
		{
			MethodName: "ConnectToNode",
			Handler:    _BlockchainService_ConnectToNode_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _BlockchainService_AddTransaction_Handler,
		},
		{
			MethodName: "AppendTransactions",
			Handler:    _BlockchainService_AppendTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToNetwork",
			Handler:       _BlockchainService_ConnectToNetwork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectUser",
			Handler:       _BlockchainService_ConnectUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactions",
			Handler:       _BlockchainService_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _BlockchainService_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blockchain/blockchainpb/blockchain.proto",
}
